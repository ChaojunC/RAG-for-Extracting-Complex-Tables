{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chaoj\\\\Downloads\\\\RAG assignment\\\\RAG assignment\\\\starter-code\\\\kg\\\\kg-demo\\\\src\\\\KnowledgeGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport ReactFlow, { MiniMap, Controls, useNodesState, useEdgesState, applyNodeChanges, applyEdgeChanges } from 'react-flow-renderer';\nimport jsonData from './kg_relations.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KnowledgeGraph = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  useEffect(() => {\n    const nodesMap = new Map();\n    const sourcePositionMap = new Map();\n    const targetPositionMap = new Map();\n    const numColumns = 5;\n    const xSpacing = 200;\n    const ySpacing = 150;\n    jsonData.forEach((item, index) => {\n      const sourceId = `${item.source}_${item.sourcetype}`;\n      const targetId = `${item.target}_${item.targettype}`;\n      if (!nodesMap.has(sourceId)) {\n        let sourceRow = sourcePositionMap.get(item.source);\n        if (sourceRow === undefined) {\n          sourceRow = sourcePositionMap.size;\n          sourcePositionMap.set(item.source, sourceRow);\n        }\n        const xPosition = sourceRow % numColumns * xSpacing;\n        const yPosition = Math.floor(sourceRow / numColumns) * ySpacing;\n        nodesMap.set(sourceId, {\n          id: sourceId,\n          type: \"default\",\n          className: 'custom-node',\n          data: {\n            label: `${item.source}`\n          },\n          position: {\n            x: xPosition,\n            y: yPosition\n          }\n        });\n      }\n      if (!nodesMap.has(targetId)) {\n        let targetRow = targetPositionMap.get(item.target);\n        if (targetRow === undefined) {\n          targetRow = targetPositionMap.size;\n          targetPositionMap.set(item.target, targetRow);\n        }\n        const xPosition = targetRow % numColumns * xSpacing;\n        const yPosition = Math.floor(targetRow / numColumns) * ySpacing + 300;\n        nodesMap.set(targetId, {\n          id: targetId,\n          type: \"default\",\n          className: 'custom-node',\n          data: {\n            label: `${item.target}`\n          },\n          position: {\n            x: xPosition,\n            y: yPosition\n          },\n          style: {\n            backgroundColor: \"#EBE1D2\"\n          }\n        });\n      }\n      setEdges(prev => [...prev, {\n        id: `e${index}`,\n        source: sourceId,\n        target: targetId,\n        animated: true,\n        label: item.relation\n      }]);\n    });\n    setNodes([...nodesMap.values()]);\n  }, []);\n  const onNodeDragStop = useCallback((event, node) => {\n    setNodes(nds => nds.map(n => n.id === node.id ? node : n));\n  }, [setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeDragStop: onNodeDragStop,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(KnowledgeGraph, \"2+3ErxJPUrG5zT73tIApcXMBT8M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = KnowledgeGraph;\nexport default KnowledgeGraph;\nvar _c;\n$RefreshReg$(_c, \"KnowledgeGraph\");","map":{"version":3,"names":["React","useCallback","useEffect","ReactFlow","MiniMap","Controls","useNodesState","useEdgesState","applyNodeChanges","applyEdgeChanges","jsonData","jsxDEV","_jsxDEV","KnowledgeGraph","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nodesMap","Map","sourcePositionMap","targetPositionMap","numColumns","xSpacing","ySpacing","forEach","item","index","sourceId","source","sourcetype","targetId","target","targettype","has","sourceRow","get","undefined","size","set","xPosition","yPosition","Math","floor","id","type","className","data","label","position","x","y","targetRow","style","backgroundColor","prev","animated","relation","values","onNodeDragStop","event","node","nds","map","n","height","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chaoj/Downloads/RAG assignment/RAG assignment/starter-code/kg/kg-demo/src/KnowledgeGraph.js"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, useNodesState, useEdgesState, applyNodeChanges, applyEdgeChanges } from 'react-flow-renderer';\r\nimport jsonData from './kg_relations.json';\r\n\r\nconst KnowledgeGraph = () => {\r\n    const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n    useEffect(() => {\r\n        const nodesMap = new Map();\r\n        const sourcePositionMap = new Map();\r\n        const targetPositionMap = new Map();\r\n        const numColumns = 5;\r\n        const xSpacing = 200;\r\n        const ySpacing = 150;\r\n\r\n        jsonData.forEach((item, index) => {\r\n            const sourceId = `${item.source}_${item.sourcetype}`;\r\n            const targetId = `${item.target}_${item.targettype}`;\r\n\r\n            if (!nodesMap.has(sourceId)) {\r\n                let sourceRow = sourcePositionMap.get(item.source);\r\n                if (sourceRow === undefined) {\r\n                    sourceRow = sourcePositionMap.size;\r\n                    sourcePositionMap.set(item.source, sourceRow);\r\n                }\r\n                const xPosition = (sourceRow % numColumns) * xSpacing;\r\n                const yPosition = Math.floor(sourceRow / numColumns) * ySpacing;\r\n                nodesMap.set(sourceId, {\r\n                    id: sourceId,\r\n                    type: \"default\",\r\n                    className: 'custom-node',\r\n                    data: { label: `${item.source}` },\r\n                    position: { x: xPosition, y: yPosition },\r\n                });\r\n            }\r\n\r\n            if (!nodesMap.has(targetId)) {\r\n                let targetRow = targetPositionMap.get(item.target);\r\n                if (targetRow === undefined) {\r\n                    targetRow = targetPositionMap.size;\r\n                    targetPositionMap.set(item.target, targetRow);\r\n                }\r\n                const xPosition = (targetRow % numColumns) * xSpacing;\r\n                const yPosition = Math.floor(targetRow / numColumns) * ySpacing + 300;\r\n                nodesMap.set(targetId, {\r\n                    id: targetId,\r\n                    type: \"default\",\r\n                    className: 'custom-node',\r\n                    data: { label: `${item.target}` },\r\n                    position: { x: xPosition, y: yPosition },\r\n                    style: { backgroundColor: \"#EBE1D2\" }\r\n                });\r\n            }\r\n\r\n            setEdges(prev => [...prev, {\r\n                id: `e${index}`,\r\n                source: sourceId,\r\n                target: targetId,\r\n                animated: true,\r\n                label: item.relation,\r\n            }]);\r\n        });\r\n\r\n        setNodes([...nodesMap.values()]);\r\n    }, []);\r\n\r\n\r\n\r\n    const onNodeDragStop = useCallback((event, node) => {\r\n        setNodes((nds) => nds.map((n) => (n.id === node.id ? node : n)));\r\n    }, [setNodes]);\r\n\r\n    return (\r\n        <div style={{ height: '100vh' }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeDragStop={onNodeDragStop}\r\n            >\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KnowledgeGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}